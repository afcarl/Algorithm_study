This is my notes of studying graph algorithms.

1. Representation of graphs.
  1) Adjacency list representation.
     This is for sparse graph.

       Adjacency list template for my C++:

       #include <vector>
       vector<int> Graph[V];
       Graph[u].push_back(v);

       Standing for an edge connecting u and v.
       And there are totally V nodes.

       Moreover, if the edges have their own weight, we can store it in following way.

       #include <vector>
       #include <utility>
       vector<pair<int, int> > Graph[V];
       Graph[u].push_back(make_pair(v,w));

       Standing for an edge connecting u and v with weight w.
       Totally V nodes.

  2) Adjacency matrix representation.
     It's more suitable for dense graph.

       Adjacency matrix template in C++ is just a 2D array.

       int Graph[V][V] = 1 or 0;

2. BFS search for graphs.
     
